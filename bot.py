import random
import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–ø–∏—Å–æ–∫ –ø–æ–∑, –≤—ã–Ω–µ—Å–µ–Ω–Ω—ã–π –≤ –∫–æ–Ω—Å—Ç–∞–Ω—Ç—É
POSES = [
    ("–û–±—ä—è—Ç–∏—è –Ω–∞ –¥–∏–≤–∞–Ω–µ", "–ü–∞—Ä—Ç–Ω–µ—Ä—ã —Å–∏–¥—è—Ç –Ω–∞ –¥–∏–≤–∞–Ω–µ, –æ–±–Ω–∏–º–∞—é—Ç –¥—Ä—É–≥ –¥—Ä—É–≥–∞, —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω—ã –∏ –Ω–∞—Å–ª–∞–∂–¥–∞—é—Ç—Å—è –±–ª–∏–∑–æ—Å—Ç—å—é."),
    ("–ü–æ–∑–∞ –ª–æ–∂–∫–∏", "–ü–∞—Ä—Ç–Ω–µ—Ä—ã –ª–µ–∂–∞—Ç –Ω–∞ –±–æ–∫—É, –æ–¥–∏–Ω –∑–∞ –¥—Ä—É–≥–∏–º, –æ–±–≤–∏–≤ –¥—Ä—É–≥ –¥—Ä—É–≥–∞ —Ä—É–∫–∞–º–∏."),
    ("–ö–ª–∞—Å—Å–∏—á–µ—Å–∫–∞—è –º–∏—Å—Å–∏–æ–Ω–µ—Ä—Å–∫–∞—è", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –ª–µ–∂–∏—Ç –Ω–∞ —Å–ø–∏–Ω–µ, –≤—Ç–æ—Ä–æ–π —Å–≤–µ—Ä—Ö—É, –ª–∏—Ü–æ–º –∫ –ø–µ—Ä–≤–æ–º—É."),
    ("–ù–∞–µ–∑–¥–Ω–∏—Ü–∞", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –ª–µ–∂–∏—Ç –Ω–∞ —Å–ø–∏–Ω–µ, –≤—Ç–æ—Ä–æ–π —Å–∏–¥–∏—Ç —Å–≤–µ—Ä—Ö—É, –ª–∏—Ü–æ–º –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É."),
    ("–ü–æ–∑–∞ 69", "–û–±–∞ –ø–∞—Ä—Ç–Ω–µ—Ä–∞ –ª–µ–∂–∞—Ç –≥–æ–ª–æ–≤–æ–π –≤–Ω–∏–∑ –∏ –≤—ã–ø–æ–ª–Ω—è—é—Ç –æ—Ä–∞–ª—å–Ω—ã–µ –ª–∞—Å–∫–∏ –¥—Ä—É–≥ –¥—Ä—É–≥—É."),
    ("–î–æ–≥–≥–∏-—Å—Ç–∞–π–ª", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä —Å—Ç–æ–∏—Ç –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö –∏ –ª–∞–¥–æ–Ω—è—Ö, –∞ –≤—Ç–æ—Ä–æ–π –ø–∞—Ä—Ç–Ω–µ—Ä –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö —Å–∑–∞–¥–∏."),
    ("–û–±—Ä–∞—Ç–Ω–∞—è –Ω–∞–µ–∑–¥–Ω–∏—Ü–∞", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä –ª–µ–∂–∏—Ç –Ω–∞ —Å–ø–∏–Ω–µ, –≤—Ç–æ—Ä–æ–π —Å–∏–¥–∏—Ç —Å–≤–µ—Ä—Ö—É, —Å–ø–∏–Ω–æ–π –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É."),
    ("–ü–æ–∑–∞ –ª–æ—Ç–æ—Å–∞", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä —Å–∏–¥–∏—Ç —Å –ø–µ—Ä–µ–∫—Ä–µ—â–µ–Ω–Ω—ã–º–∏ –Ω–æ–≥–∞–º–∏, –¥—Ä—É–≥–æ–π —Å–∞–¥–∏—Ç—Å—è –µ–º—É –Ω–∞ –∫–æ–ª–µ–Ω–∏, –ª–∏—Ü–æ–º –∫ –ø–∞—Ä—Ç–Ω–µ—Ä—É."),
    ("–°–∏–¥—è –Ω–∞ —Å—Ç—É–ª–µ", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä —Å–∏–¥–∏—Ç –Ω–∞ —Å—Ç—É–ª–µ, –¥—Ä—É–≥–æ–π —Å–∏–¥–∏—Ç –µ–º—É –Ω–∞ –∫–æ–ª–µ–Ω—è—Ö –ª–∏—Ü–æ–º –∫ –Ω–µ–º—É."),
    ("–ù–∞ —Å—Ç–æ–ª–µ", "–û–¥–∏–Ω –ø–∞—Ä—Ç–Ω–µ—Ä —Å–∏–¥–∏—Ç –Ω–∞ —Å—Ç–æ–ª–µ, –≤—Ç–æ—Ä–æ–π —Å—Ç–æ–∏—Ç –ø–µ—Ä–µ–¥ –Ω–∏–º –∏–ª–∏ –º–µ–∂–¥—É –µ–≥–æ –Ω–æ–≥."),
]

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥
async def start_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start.
    –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø–æ–∑—ã.
    """
    try:
        if update.message:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏—à–ª–æ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É
            chat = update.message.chat
        elif update.callback_query:  # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É
            chat = update.callback_query.message.chat
        else:
            return  # –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–µ—Ç –Ω–∏ message, –Ω–∏ callback_query

        keyboard = [
            [InlineKeyboardButton("üíö –ü–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑—É üíö", callback_data='random_pose')],
            [InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚õî", callback_data='stop')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await chat.send_message(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏—Ç—å –≤–∞—à–∏ –≤–µ—á–µ—Ä–∞. "
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑—É.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ /start: {e}")

async def random_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–π –ø–æ–∑—ã.
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑—É —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º.
    """
    try:
        random_pose, description = random.choice(POSES)
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —ç—Ç—É –ø–æ–∑—É: {random_pose}\n–û–ø–∏—Å–∞–Ω–∏–µ: {description}'
        )
        # –ü–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å–Ω–æ–≤–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è –≤—ã–±–æ—Ä
        keyboard = [
            [InlineKeyboardButton("üíö –ü–æ–ª—É—á–∏—Ç—å –¥—Ä—É–≥—É—é –ø–æ–∑—É üíö", callback_data='random_pose')],
            [InlineKeyboardButton("‚õî –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ‚õî", callback_data='stop')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.reply_text(
            "–•–æ—Ç–∏—Ç–µ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –µ—â–µ –æ–¥–Ω—É? –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ random_command: {e}")

async def stop_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã 'stop', –∑–∞–º–µ–Ω—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–æ–π –¥–ª—è —Å—Ç–∞—Ä—Ç–∞.
    """
    try:
        await update.callback_query.answer()
        # –ú–µ–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–ª—è —Å—Ç–∞—Ä—Ç–∞
        keyboard = [
            [InlineKeyboardButton("üîÑ –ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞ üîÑ", callback_data='restart')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.callback_query.message.edit_text(
            "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ stop_command: {e}")

async def restart_command(update: Update, context: CallbackContext) -> None:
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞" –ø–æ—Å–ª–µ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.
    –í–æ—Å—Å–æ–∑–¥–∞—ë—Ç –ø–æ–≤–µ–¥–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã /start.
    """
    try:
        await start_command(update, context)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ restart_command: {e}")

def main() -> None:
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∑–∞–ø—É—Å–∫–∞—é—â–∞—è –±–æ—Ç–∞.
    """
    try:
        # –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –Ω–∏–∂–µ –≤–∞—à–∏–º —Ç–æ–∫–µ–Ω–æ–º
        BOT_TOKEN = "7601748735:AAEe3aIX8OSBH4-W-0vz3_IB_SEhg30TmRI"

        # –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        application = Application.builder().token(BOT_TOKEN).build()

        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥
        application.add_handler(CommandHandler("start", start_command))

        # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
        application.add_handler(CallbackQueryHandler(random_command, pattern='random_pose'))
        application.add_handler(CallbackQueryHandler(stop_command, pattern='stop'))
        application.add_handler(CallbackQueryHandler(restart_command, pattern='restart'))

        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
        application.run_polling()

    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
