import random
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, CallbackContext, MessageHandler, filters

# Настройка логирования
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Список поз, вынесенный в константу
POSES = [
    ("Объятия на диване", "Партнеры сидят на диване, обнимают друг друга, расслаблены и наслаждаются близостью."),
    ("Поза ложки", "Партнеры лежат на боку, один за другим, обвив друг друга руками."),
    ("Классическая миссионерская", "Один партнер лежит на спине, второй сверху, лицом к первому."),
    ("Наездница", "Один партнер лежит на спине, второй сидит сверху, лицом к партнеру."),
    ("Поза 69", "Оба партнера лежат головой вниз и выполняют оральные ласки друг другу."),
    ("Догги-стайл", "Один партнер стоит на коленях и ладонях, а второй партнер находится на коленях сзади."),
    ("Обратная наездница", "Один партнер лежит на спине, второй сидит сверху, спиной к партнеру."),
    ("Поза лотоса", "Один партнер сидит с перекрещенными ногами, другой садится ему на колени, лицом к партнеру."),
    ("Сидя на стуле", "Один партнер сидит на стуле, другой сидит на его коленях лицом к нему."),
    ("На столе", "Один партнер сидит на столе, второй стоит перед ним или между его ног."),
    ("Миссионерская с поднятыми ногами", "Один партнер лежит на спине, а второй держит его ноги на своих плечах."),
    ("Поза стоя", "Один партнер стоит, а второй партнер обвивает его ногами и выполняет движения."),
    ("Поза на коленях", "Один партнер на коленях, второй сзади, держа его за бедра."),
    ("Поза с перевернутым бедром", "Один партнер стоит на коленях, второй переворачивает его бедра для более глубокого проникновения."),
    ("Поза на пианино", "Один партнер сидит на пианино или другом удобном предмете, второй партнер сидит сверху."),
    ("Поза 'обратная ложка'", "Партнеры лежат на боку, но тот, кто обычно находится сзади, теперь спереди."),
    ("Поза на унитазе", "Один партнер сидит на унитазе, второй сидит сверху, лицом к нему."),
    ("Кошка на столе", "Один партнер стоит на коленях на столе, второй партнер стоит сзади."),
    ("Танец на стуле", "Один партнер сидит на стуле, а второй танцует вокруг, создавая интимную атмосферу."),
    ("Поза на боку с раздвинутыми ногами", "Один партнер лежит на боку, а другой партнер стоит сзади или спереди."),
    ("Поза 'нога на плечо'", "Один партнер лежит на спине, а второй кладет одну ногу на его плечо."),
    ("Поза 'северное сияние'", "Партнеры расположены в положении лежа, один из них на спине, а второй за ним, обвивает его ногами."),
    ("Поза с поднятыми бедрами", "Один партнер лежит на спине с поднятыми бедрами, второй партнер стоит перед ним."),
    ("Поза на коленях с обвиванием ног", "Один партнер стоит на коленях, второй встает перед ним и обвивает его ноги."),
    ("Поза на поверхности", "Один партнер лежит на поверхности (стол, диван и т.д.), второй стоит между его ног."),
    ("Сидя на полу лицом друг к другу", "Партнеры сидят лицом друг к другу, обвивают друг друга ногами."),
    ("Поза на кресле", "Один партнер сидит на кресле, второй партнер сидит ему на коленях или перед ним."),
    ("Поза 'перевернутый стул'", "Один партнер сидит на стуле, второй стоит, опираясь руками о спинку стула."),
    ("Поза 'все на пол'", "Один партнер лежит на полу, второй находится сверху или между его ног."),
    ("Римская поза", "Один партнер лежит на спине с поднятыми ногами, второй партнер сидит на его коленях."),
    ("Поза с партнером стоя, вальс", "Оба партнера стоят, обнимают друг друга и двигаются, как в танце."),
    ("Поза стоя на лестнице", "Один партнер стоит на нижней ступеньке лестницы, второй — на более высокой."),
    ("Поза на берегу моря", "Партнеры могут быть на пляже или воображаемом берегу, стоя друг напротив друга."),
    ("Поза под стеклом", "Один партнер лежит на спине, второй партнер стоит прямо над ним, поддерживая стекло."),
]

# Настройки обработки команд
async def start_command(update: Update, context: CallbackContext) -> None:
    """
    Обработчик команды /start.
    Приветствует пользователя и сообщает о доступных командах.
    """
    try:
        await update.message.reply_text(
            "Привет! Я бот, который поможет вам разнообразить ваши вечера. "
            "Попробуйте команду /random, чтобы получить случайную позу."
        )
    except Exception as e:
        logger.error(f"Ошибка в обработчике /start: {e}")

async def random_command(update: Update, context: CallbackContext) -> None:
    """
    Обработчик команды /random.
    Отправляет случайную позу с описанием.
    """
    try:
        random_pose, description = random.choice(POSES)
        await update.message.reply_text(f'Попробуйте эту позу: {random_pose}\nОписание: {description}')
        await update.message.reply_text("Хотите попробовать еще одну? Напишите /random или /stop.")
    except Exception as e:
        logger.error(f"Ошибка в обработчике /random: {e}")

async def message_handler(update: Update, context: CallbackContext) -> None:
    """
    Обработчик текстовых сообщений, вызывающий команду /start.
    """
    try:
        await start_command(update, context)
    except Exception as e:
        logger.error(f"Ошибка в обработчике сообщений: {e}")

def main() -> None:
    """
    Основная функция, запускающая бота.
    """
    try:
        # Замените строку ниже вашим токеном
        BOT_TOKEN = "7601748735:AAEe3aIX8OSBH4-W-0vz3_IB_SEhg30TmRI"

        # Создание приложения
        application = Application.builder().token(BOT_TOKEN).build()

        # Регистрация обработчиков команд
        application.add_handler(CommandHandler("start", start_command))
        application.add_handler(CommandHandler("random", random_command))

        # Обработчик для всех текстовых сообщений
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))

        # Запуск бота
        logger.info("Бот запущен.")
        application.run_polling()

    except Exception as e:
        logger.critical(f"Критическая ошибка: {e}")

if __name__ == "__main__":
    main()
